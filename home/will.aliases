# Will's alias file for all SH-derived shells (SH, ASH, ZSH, BASH, etc.),
# contains basic stuff for interactive and non-interactive shells

# version 2018-08-07
# - Add/coalesce cleanup to the bottom of the file
# - "Protect" alias/functions which were only valid in some shells from
#   being expanded even when they don't support the features.
# - Re-factor shell detection to support more differences (affects lc/uc)
# - Add path searching aliases that keeps this easy between shells (uses findwhich.sh)
# - Minor tweaks to resourcing for POSIX compatibility
# - Add aliases for editing/resourcing this file
# - Add some find aliases to report/modify permissions when dealing with group work

################################################################################
# DEBUG & ALIAS GUARD (the command -v checks break on re-run)
################################################################################
# If running interactively, set veriable to print debug
secho () {
  case $- in
    *i*) echo "$@";;
      *) return 1;;
  esac
}

resourcing () {
   [ -z "${resource:+x}" ] && return 1 || return 0
}

underscore="$_"

if command -v wills_supper_hacky_guard_alias > /dev/null 2>&1; then
  if [ "x$1" = "x-f" ] || [ $will_enable_alias_resource -eq 1 ]; then
    secho "WARNING: resourcing will.aliases is expermental"
    resource=1
    # Keep count of resources for debug. TODO: OK in DASH, test on busbybox/ASH?
    alias wills_supper_hacky_guard_alias="echo $(($( wills_supper_hacky_guard_alias )+1))"
  else
    secho "Not re-sourcing will.alises"
    return 0
    exit 0
  fi
else
  secho "running will.aliases"
  unset resource
  alias wills_supper_hacky_guard_alias='echo 0'
fi

# Try to find the path of the alias file (unless we're resourcing)
if ! resourcing; then
  if [ -f "$underscore" ]; then
    aliasfilepath="$( readlink -f "$underscore" )"
  elif [ -f "$HOME/mystuff/home/will.aliases" ]; then
    aliasfilepath="$( readlink -f "$HOME/mystuff/home/will.aliases" )"
  else
    findresult="$( find "$HOME" -name will.aliases )"
    if [ -f "$findresult" ]; then
      aliasfilepath="$findresult"
    else
      aliasfilepath="NOTFOUND"
    fi
  fi
fi

################################################################################
# Shell detection (for some variables that we use later)
################################################################################
# start with no result
thisshell="notfound"

# check if the $$ built-in pid works
case $$ in
  ''|*[!0-9]*) pidok=0;;
            *) [ $$ -gt 0 ] && pidok=1 || pidok=0;;
esac

# if it works copy to our own variable, otherwise try sh's ps
if [ $pidok -eq 1 ]; then
  mypid=$$
else
  extpid="$( sh -c 'ps -o ppid= -p $$' 2> /dev/null )"
  if $? && [ $extpid -gt 0 ]; then
    mypid=$extpid
    pidok=1;
  fi
fi

# Now, waterfall through pid-based options to trying to grok $0
# TODO: any more to add? most others seem to be based on validity of built-ins
if [ $pidok -eq 1 ] && [ -f "/proc/$mypid/exe" ]; then
  shellpath="$( readlink -f /proc/$mypid/exe )"
  thisshell="${shellpath##*/}"
elif [ $pidok -eq 1 ] && shellps="$( ps -o command= -p $mypid )"; then
  # strip bash starting -, anything else?
  thisshell="${shellps##-}"
else
  case "$0" in
    busybox) thisshell="busybox";;
      *bash) thisshell="bash";;
       zsh*) thisshell="zsh";;
       dash) thisshell="dash";;
        ash) thisshell="ash";;
         sh) thisshell="POSIX";;
  esac
fi

# These are the shells this script has speicfics for
is_zsh=0
is_bash=0
is_busybox=0

# grok the resulting shell variable
if [ "$thisshell" = "notfound" ]; then
  if [ $pidok -eq 1 ]; then
    secho "no shell idenified by pid $mypid or command $0"
  else
    secho "no shell idenified, could not find pid, command $0"
  fi
elif [ "${thisshell%[0-9]}" = "zsh" ]; then
  secho "will.aliases recognizes zsh"
  is_zsh=1
elif [ "$thisshell" = "bash" ]; then
  secho "will.aliases recognizes bash"
  is_bash=1
elif [ "$thisshell" = "busybox" ]; then
  secho "will.aliases recognizes busybox"
  is_busybox=1
else
  secho "will.aliases does not have specifics for shell $thisshell"
fi

# Localize the shell detection cleanup because most variables are here
unset pidok
unset mypid
unset extpid
unset shellpath
unset shellps
unset thisshell

################################################################################
# Portability stuff                           should be before almost everything
################################################################################

# keep dirstack stuff where it is
if resourcing; then
  # The only portable way is to unset this (it's always a function) and re-detect
  unset -f pushd
fi
if command -v pushd > /dev/null 2>&1; then
  if [ $is_zsh -eq 1 ] && setopt | grep -q autopushd; then
    dirstack="automatic"
  else
    dirstack="present"
  fi
else
  dirstack="missing"
fi

# Alias favorite programs that may be missing
# We don't re-do this on resource (it's been stable, simple enough to manually re-do)
if ! resourcing; then
  # more/less
  if ! command -v 'less' > /dev/null 2>&1; then
    alias less='more'
  else
    alias more='less'
  fi

  # vi/vim
  if ! command -v 'vim' > /dev/null 2>&1; then
    alias vim='vi'
  fi

  if ! command -v 'vi' > /dev/null 2>&1; then
    alias vi='vim'
  fi

  # nano -> pico -> vi(m) waterfall
  if ! command -v 'nano' > /dev/null 2>&1; then
    if command -v 'pico' > /dev/null 2>&1
    then
      alias nano='pi\co -w'
    else
      alias nano='vim'
    fi
  fi

  # pico -> vi(m) waterfall and force -w
  if ! command -v 'pico' > /dev/null 2>&1; then
    alias pico='vim'
  else
    alias pico='pico -w'
  fi

  # for scp compatibility in busybox environments
  if ! command -v 'groups' > /dev/null 2>&1; then
    alias groups='id -nG'
  fi
fi

# some du's don't have -h (human readable), but default to it if it's there
if ! d\u -h /dev/console > /dev/null 2>&1; then
  alias du='du -h'
fi

# same for df (though -h seems more common)
if ! d\f -h / > /dev/null 2>&1; then
  alias df='df -h'
fi

# UPPERCASE/lowercase conversions
# NOTE: subsitutiosn which aren't supported need protected from shells that perform substituion on all strings.
#       this is done by aliases, but they can't always be evaluated in the block where they are set.
# TODO: confirm, this should be safe for resource
useexternalcase=0
if [ $is_zsh -eq 1 ]; then
  secho "setting lc/uc for zsh"
  alias setlc='lc () { echo "${*:l}"; }'
  alias setuc='uc () { echo "${*:u}"; }'
elif [ $is_bash -eq 1 ]; then
  if [ "$BASH_VERSINFO" -lt 4 ]; then
    secho "bash is older than 4, need external case"
    useexternalcase=1
  else
    secho "setting lc/uc for bash 4+"
    alias setlc='lc () { echo "${@,,}"; }'
    alias setuc='uc () { echo "${@^^}"; }'
  fi
else
  secho "not zsh or bash, using external case"
  useexternalcase=1
fi

if [ $useexternalcase -eq 1 ]; then
  # Not all typeset commands have the -l switch
  typesettest="$( typeset -l 'TEST' )" > /dev/null 2>&1
  if [ $? -eq 0 ] && [ "test" = "$typesettest" ]; then
    alias setlc='lc="typeset -l"'
    alias setuc='uc="typeset -u"'
  else
    alias setlc=':'
    alias setuc=':'
  fi
  # TODO: waterfall beyond this, see https://stackoverflow.com/questions/2264428/how-to-convert-a-string-to-lower-case-in-bash
fi

setlc
setuc

################################################################################
# Program overrides
################################################################################
# zgrep will search uncompressed and compressed files, default to regexes
# if resourcing just unalias first
resourcing && unalias zgrep
if command -v 'zgrep' > /dev/null 2>&1; then
  alias zgrep='zgrep --color=auto -E'
else
  alias zgrep='grep --color=auto -E'
fi

alias screen='screen -xR'
alias sscreen='unset STY; scre\en'

# assh, even if go/bin isn't in gopath
# resourcing is OK, we don't actually alias assh
if command -v 'assh' > /dev/null 2>&1; then
  alias ssh='assh wrapper ssh'
elif [ -x "$HOME/go/bin/assh" ]; then
  alias ssh="$HOME/go/bin/assh wrapper ssh"
fi

################################################################################
# one-letter wonders (except for the ls group)     depend on portability aliases
################################################################################
alias m='less'
alias c='clear'
alias f='find -iname'
# Conditionals will alias htop, zgrep, nano, and vim later if they don't exist
alias e='nano'
alias v='vim'
alias t='htop'
alias g='zgrep'
# Dir-stack is rarer
if [ ! $dirstack = "missing" ]; then
  alias p='popd'
  alias d='dirs -v'
fi

################################################################################
# ls commands                                  only depend on the first one here
################################################################################
alias ls='ls -AFh --color=auto'
alias l1='l\s -1'
alias la='ls -a'
alias ll='ls -l'
alias lr='ll -r'
alias lt='ll -t'
alias ltr='ll -tr'
alias l='ll'

################################################################################
# Path searching aliases (simply cross-shell life)
################################################################################
# For a summary of my research on this see ../documental/commandsearch.md
# Leave the which binary accessable (if it is a binary)
if [ -x "$( command -v 'which' )" ]; then
  alias whichbin="$( command -v 'which' )"
# or try to find the binary if a builtin is hiding it
elif command -v whichfinder.sh > /dev/null 2>&1 && tmpwhichpath="$( whichfinder.sh )"; then
  alias whichbin="$tmpwhichpath"
fi

# Shortcut to parsable command
alias cmd='command -v'

# Use which for the pretty version a al csh.
# TOOD: any reason to use bash's type here? seems to be same as command -V
alias which='command -V'

# Multi-result search built in to bash, but called type
if [ $is_bash -eq 1 ]; then
  alias setwhere='alias where="type -a"'
else # Fake a function if there isn't some other builtin where (e.g. zsh's where does what I want)
  if ! command -v 'where' > /dev/null 2>&1; then
    alias setwhere='where () { toreturn=0; for x in $@; do command -V $x || toreturn=1; whichbin -a $x; done; return $toreturn; }'
  else
    alias setwhere=':'
  fi
fi

setwhere

################################################################################
# misc aliases                                     depend on portability aliases
################################################################################
# alias management (arguments are NOT POSIX portable)
if ! resourcing && [ "$aliasfilepath" != "NOTFOUND" ]; then
  alias amgr="vi '$aliasfilepath'"
  alias aresrc="will_enable_alias_resource=1; . '$aliasfilepath'; unset env will_enable_alias_resource"
fi

# process management
alias nukeme='kill -9 `ps -u $USER -o pid --no-heading`'
alias psa='ps u $USER'

# tar
alias tu='tar -cvzf'
alias tx='tar -xvf'

# Quick way to add user write to all files here
alias addwrite='find -P . \! -perm u=w \! -type l -user $USER -exec chmod u+w {} \;'
alias notmyro='find -P . \! -perm -g=w \! -user $USER'

# force of habit
alias cls='clear'

# Also leaving this alone for resource
if ! resourcing; then
  if command -v 'gitk' > /dev/null 2>&1; then
    alias gci='git citool &'
  fi
fi

################################################################################
# file/directory aliases                                             independent
################################################################################
alias rp='readlink -f'
alias up='cd ..'
alias up2='cd ../..'
alias upp='cd ../..'
alias up3='cd ../../..'
alias uppp='cd ../../..'
alias up4='cd ../../../..'
alias upppp='cd ../../../..'
alias up5='cd ../../../../..'
alias uppppp='cd ../../../../..'
alias mkdir='mkdir -p'
alias md='mkdir -p'
alias cp='cp -a'

# more in the "functionland" section

################################################################################
# functionland
################################################################################

# replace pushd with cd if the shell doesn't implement directory stack
# note: this is mostly for functions... I don't use pushd and expect cd to push
if [ $dirstack = "present" ]; then
  # Tell pushd to shut the hell up (but allow errors)
  pushd () {
    command pushd $* > /dev/null
  }
elif [ $dirstack = "missing" ]; then
  # just alias it to cd
  pushd () {
    command cd $*
  }
fi

# smart CD to the path containing a file if file given
cd() {
  if [ -z $1 ]
  then
    # no arguments has a different default meaning to pushd, but we still want the cd behavior
    # TODO: check if this has any issue for ZSH (autopushd)
    pushd ~
  elif [ -z $2 ]
  then
    if [ -f $1 ]
    then
      pushd `dirname $1`
    else
      pushd $1
    fi
  else
    # multiple arguments overrides this and falls back to the regular cd
    command cd $*
  fi
}

# cd and/or less is simpler with smartcd
# Note: cdl can be "odd" when the path is a link etc. since it needs to use
#       readlink to get the full path. This could be made better by path-parsing,
#       but I'm too lazy to figure out how to make that portable
cdl () {
  local file=`readlink -f $1`
  cd $1
  less $file
}

#mkcd=mkdir then CD (doesn't need smart CD since we just made the directory)
mkcd () {
  mkdir "$@"
  pushd "$@"
}

# smart background remove
rmr () {
  mkdir tombstone > /dev/null 2>&1
  local tombstone=`readlink -f tombstone`
  if [ ! -d "$tombstone" ]; then
    echo "ERROR: tombstone creation failed"
    return 1
  fi
  mv $* $tombstone/ > /dev/null 2>&1
  for x in $*; do
    rm -rf $tombstone/$x
  done && rmdir $tombstone > /dev/null 2>&1 &
}

# dua (du all): use a loop to prevent globbing errors on the pickier shells
# finally, we want to avoid using du on certain dirs (most notably snapshots)
dua () {
  for x in .[!.]* ..?* *
  do
    if [ -e $x && $x != ".snapshot/" ]
    then
      du -sx $x
    fi
  done
}

# Add & to common guis
# We don't re-do this on resource (it's been stable, simple enough to manually re-do)
if ! resourcing; then
  if command -v 'gitk' > /dev/null 2>&1; then
    gitk () {
      command gitk $* &
    }
  fi

  if command -v 'kate' > /dev/null 2>&1; then
    kate () {
      command kate $* &
    }
  fi

  if command -v 'gedit' > /dev/null 2>&1; then
    gedit () {
      command gedit $* &
    }
  fi

  if command -v 'gvim' > /dev/null 2>&1; then
    gvim () {
      command gvim $* &
    }
  fi
fi

################################################################################
# cleanup (keep all non-functional unalias and unsets here except shell detect)
################################################################################
# These alias were used to set other alias/functions protected from nosey shells
unalias setlc
unalias setuc
unalias setwhere

# Misc variables in the script which must be cleaned since this is soruced
# and local isn't POSIX.
unset aliasfilepath
unset dirstack
unset findresult
unset is_bash
unset is_busybox
unset is_zsh
unset resource
unset typesettest
unset undescore
unset useexternalcase
